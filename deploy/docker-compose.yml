services:
  web:
    image: xdr:latest
    container_name: xdr-web
    ports:
      - 8088:80
    environment:
      - PORT=80
      - HOST=0.0.0.0
      - JWT_ACCESS_SECRET=xdr_access_secret_key_for_jwt_tokens_2025_minimum_32_chars
      - JWT_REFRESH_SECRET=xdr_refresh_secret_key_for_jwt_tokens_2025_minimum_32_chars
      - JWT_ACCESS_TTL=24h
      - JWT_REFRESH_TTL=720h
      - JWT_ISSUER=XDR
      - POSTGRES_HOST=xdr-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_NAME=xdr
      - POSTGRES_SSL_MODE=
      - POSTGRES_MAX_OPEN_CONNS=10
      - POSTGRES_MAX_IDLE_CONNS=5
      - POSTGRES_CONN_MAX_LIFETIME=30m
      - REDIS_HOST=xdr-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=admin1234
      - REDIS_DB=12
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/metrics"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - xdr-network
  postgres:
    image: postgres:latest
    container_name: xdr-postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_NAME=xdr
      - POSTGRES_SSL_MODE=
      - POSTGRES_MAX_OPEN_CONNS=10
      - POSTGRES_MAX_IDLE_CONNS=5
      - POSTGRES_CONN_MAX_LIFETIME=30m
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "xdr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - xdr-network   
  redis:
    image: redis:7.4.1
    container_name: xdr-redis
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=admin1234
      - REDIS_DB=12
      - REDIS_POOL_SIZE=10
      - REDIS_MIN_IDLE_CONNS=2
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - xdr-network
  prometheus:
    image: prom/prometheus:latest
    container_name: xdr-prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      web:
        condition: service_healthy
    restart: always
    networks:
      - xdr-network
  grafana:
    image: grafana/grafana:latest
    container_name: xdr-grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    restart: always
    networks:
      - xdr-network
volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  xdr-network:
    driver: bridge  